{"ast":null,"code":"var _jsxFileName = \"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Preview } from '../components/Preview';\nimport { Message } from '../components/Message';\nimport { MessageBox } from '../components/MessageBox';\nimport './RoomFriend.scss'; //const socket = new WebSocket(\"ws://localhost:8000/ws/234\");\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Friend = props => {\n  _s();\n\n  const history = useHistory();\n  const [msg, setMsg] = useState();\n  const [messages, setMessages] = useState([]);\n  const [room_id, setRoomId] = useState(''); //const room_id = useRef(null);\n\n  const socket = useRef(null); //let socket = new WebSocket(\"ws://localhost:8000/ws/123\")\n\n  let router_data = useParams();\n  let friend_id = router_data['friend_id'];\n\n  if (!localStorage.getItem(\"user\")) {\n    history.push('/login');\n  }\n\n  useEffect(() => {\n    const getFriendChat = async () => {\n      const response = await fetch(\"http://localhost:8000/api/get-friend-chat\", {\n        // send post request to logout endpoint\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          friend_id: friend_id\n        })\n      });\n      const result = await response.json();\n      setRoomId(result['room_id']);\n    };\n\n    const getMessages = async () => {\n      const response = await fetch(\"http://localhost:8000/api/get-messages\", {\n        // send post request to logout endpoint\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          room_id: room_id\n        })\n      });\n      const result = await response.json();\n      setMessages(result['messages']);\n    };\n\n    getFriendChat();\n    getMessages();\n    socket.current = new WebSocket(\"ws://localhost:8000/ws/\" + room_id);\n    return () => socket.current.close();\n  }, [room_id, friend_id]);\n\n  socket.current.onopen = event => {\n    console.log(\"Connection at: \", \"ws://localhost:8000/ws/\" + room_id);\n  };\n\n  socket.current.onmessage = msg => {\n    let new_msg = JSON.parse(msg.data);\n    console.log(new_msg);\n    setMessages(prev => [...prev, new_msg]);\n  };\n\n  socket.current.onclose = event => {\n    console.log(\"socket closed connection: \", event);\n  };\n\n  const sendMsg = () => {\n    socket.current.send(msg);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container room-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Preview, {\n        alt: \"friend\",\n        size: \"img-large\",\n        isRoom: false,\n        friend_id: friend_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: messages.length === 0 ? null : Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          user: messages[key]['user'],\n          text: messages[key]['text'],\n          isCurrUser: props.user['username'] === messages[key]['user']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(MessageBox, {\n        onChange: setMsg,\n        onClick: sendMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Friend, \"47H1S+0kvfq4w5X+Qb49AtY9v/s=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Friend;\n\nvar _c;\n\n$RefreshReg$(_c, \"Friend\");","map":{"version":3,"sources":["/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js"],"names":["React","useEffect","useState","useRef","useHistory","useParams","Preview","Message","MessageBox","Friend","props","history","msg","setMsg","messages","setMessages","room_id","setRoomId","socket","router_data","friend_id","localStorage","getItem","push","getFriendChat","response","fetch","method","headers","credentials","body","JSON","stringify","result","json","getMessages","current","WebSocket","close","onopen","event","console","log","onmessage","new_msg","parse","data","prev","onclose","sendMsg","send","length","Object","keys","map","key","user"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\nimport {Message} from '../components/Message'\nimport {MessageBox} from '../components/MessageBox'\nimport './RoomFriend.scss'\n\n//const socket = new WebSocket(\"ws://localhost:8000/ws/234\");\n\nexport const Friend = (props) => {\n    const history = useHistory()\n    const [msg, setMsg] = useState()\n    const [messages, setMessages] = useState([])\n    const [room_id, setRoomId] = useState('');\n    //const room_id = useRef(null);\n    const socket = useRef(null);\n    //let socket = new WebSocket(\"ws://localhost:8000/ws/123\")\n\n    let router_data = useParams()\n    let friend_id = router_data['friend_id']\n\n    if (!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n\n    useEffect(() => {\n        const getFriendChat = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-friend-chat\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: friend_id\n                })\n            })\n\n            const result = await response.json()\n            setRoomId(result['room_id'])\n        }\n\n        const getMessages = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-messages\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: room_id\n                })\n            })\n\n            const result = await response.json()\n            setMessages(result['messages'])\n        }\n\n        getFriendChat()\n        getMessages()\n\n        socket.current = new WebSocket(\"ws://localhost:8000/ws/\"+room_id)\n        \n\n        return () => socket.current.close()\n\n    },[room_id, friend_id])\n        socket.current.onopen = (event) => {\n            console.log(\"Connection at: \", \"ws://localhost:8000/ws/\"+room_id)\n        }\n        socket.current.onmessage = (msg) => {\n            let new_msg = JSON.parse(msg.data)\n            console.log(new_msg)\n            setMessages(prev => [...prev, new_msg])\n        }\n\n        socket.current.onclose = (event) => {\n            console.log(\"socket closed connection: \", event)\n        }\n\n    const sendMsg = () => {\n        socket.current.send(msg)\n    }\n\n    return (\n        <div className='container room-friend-container'>\n            <div className='row mt-5'>\n                <Preview alt='friend' size='img-large' isRoom={false} friend_id={friend_id} />\n            </div>\n\n            <div className='row'>\n                {messages.length === 0 ? null : Object.keys(messages).map(key => \n                    <div key={key} className=''>\n                        <Message user={messages[key]['user']} text={messages[key]['text']} isCurrUser={props.user['username'] === messages[key]['user']}/>\n                    </div>\n                )}\n            </div>\n\n            <div className='row'>\n                <MessageBox onChange={setMsg} onClick={sendMsg}/>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}