{"ast":null,"code":"var _jsxFileName = \"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Room.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Preview } from '../components/Preview';\nimport { Message } from '../components/Message';\nimport { MessageBox } from '../components/MessageBox';\nimport './RoomFriend.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Room = props => {\n  _s();\n\n  const socket = new WebSocket(\"ws://localhost:8000/ws/\");\n  const socketRef = useRef();\n  socketRef.current = socket;\n  const history = useHistory();\n  const [msg, setMsg] = useState();\n  const [messages, setMessages] = useState(''); // get room id\n\n  let router_data = useParams();\n  let room_id = router_data['room_id'];\n  props.setRoomID(room_id);\n\n  if (!localStorage.getItem(\"user\")) {\n    history.push('/login');\n  }\n\n  useEffect(() => {\n    const getMessages = async () => {\n      const response = await fetch(\"http://localhost:8000/api/get-messages\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          room_id: room_id\n        })\n      });\n      const result = await response.json();\n      setMessages(result['messages']);\n    };\n\n    getMessages();\n    socketRef.current = new WebSocket(\"ws://localhost:8000/ws/\" + room_id);\n\n    socketRef.current.onopen = event => {\n      console.log(\"Connection at: \", \"ws://localhost:8000/ws/\" + room_id);\n    };\n\n    socketRef.current.onmessage = msg => {\n      let new_msg = JSON.parse(msg.data);\n      console.log(new_msg);\n      setMessages(prev => [...prev, new_msg]);\n    };\n\n    socketRef.current.onclose = event => {\n      console.log(\"socket closed connection: \", event);\n    };\n  }, [room_id]);\n\n  const sendMsg = () => socket.current.send(msg);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container room-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Preview, {\n        alt: \"room\",\n        size: \"img-large\",\n        isRoom: true,\n        room_id: room_id,\n        overlay: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: messages.length === 0 ? null : Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          user: messages[key]['user'],\n          text: messages[key]['text'],\n          isCurrUser: props.user['username'] === messages[key]['user']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(MessageBox, {\n        onChange: setMsg,\n        onClick: sendMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Room, \"wfkfQmmjM43fV3JRV7Ky+UbqUfM=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Room.js"],"names":["React","useEffect","useState","useRef","useHistory","useParams","Preview","Message","MessageBox","Room","props","socket","WebSocket","socketRef","current","history","msg","setMsg","messages","setMessages","router_data","room_id","setRoomID","localStorage","getItem","push","getMessages","response","fetch","method","headers","credentials","body","JSON","stringify","result","json","onopen","event","console","log","onmessage","new_msg","parse","data","prev","onclose","sendMsg","send","length","Object","keys","map","key","user"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\nimport {Message} from '../components/Message'\nimport {MessageBox} from '../components/MessageBox'\nimport './RoomFriend.scss'\n\nexport const Room = (props) => {\n    const socket = new WebSocket(\"ws://localhost:8000/ws/\")\n    const socketRef = useRef();\n    socketRef.current = socket;\n\n    const history = useHistory()\n    const [msg, setMsg] = useState()\n    const [messages, setMessages] = useState('')\n    // get room id\n    let router_data = useParams()\n    let room_id = router_data['room_id']\n    props.setRoomID(room_id)\n\n    if (!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n\n    useEffect(() => {\n        const getMessages = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-messages\", {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: room_id\n                })\n            })\n\n            const result = await response.json()\n            setMessages(result['messages']) \n        }\n        \n        getMessages()\n\n        socketRef.current = new WebSocket(\"ws://localhost:8000/ws/\"+room_id)\n\n        socketRef.current.onopen = (event) => {\n            console.log(\"Connection at: \", \"ws://localhost:8000/ws/\"+room_id)\n        }\n        socketRef.current.onmessage = (msg) => {\n            let new_msg = JSON.parse(msg.data)\n            console.log(new_msg)\n            setMessages(prev => [...prev, new_msg])\n        }\n        socketRef.current.onclose = (event) => {\n            console.log(\"socket closed connection: \", event)\n        }\n    }, [room_id])\n\n\n    const sendMsg = () => socket.current.send(msg)\n\n    return (\n        <div className='container room-friend-container'>\n            <div className='row mt-5'>\n                <Preview alt='room' size='img-large' isRoom={true} room_id={room_id} overlay={false} />\n            </div>\n            <div className='row'>\n                {messages.length === 0 ? null : Object.keys(messages).map(key => \n                    <div key={key} className=''>\n                        <Message user={messages[key]['user']} text={messages[key]['text']} isCurrUser={props.user['username'] === messages[key]['user']} />\n                    </div>\n                )}\n            </div>\n\n            <div className='row'>\n                <MessageBox onChange={setMsg} onClick={sendMsg}/>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}