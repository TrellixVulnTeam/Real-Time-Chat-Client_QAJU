{"ast":null,"code":"var _jsxFileName = \"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Preview } from '../components/Preview';\nimport { Message } from '../components/Message';\nimport { MessageBox } from '../components/MessageBox';\nimport './RoomFriend.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket = new WebSocket(\"ws://localhost:8000/ws/234\");\nexport const Friend = props => {\n  _s();\n\n  const history = useHistory();\n  const [msg, setMsg] = useState();\n  const [messages, setMessages] = useState([]);\n  const [room_id, setRoomID] = useState(''); //const socket = useRef(null);\n\n  let router_data = useParams();\n  let friend_id = router_data['friend_id'];\n\n  if (!localStorage.getItem(\"user\")) {\n    history.push('/login');\n  }\n\n  const user_id = props.user['_id']; // Get user id\n  //let socket = new WebSocket(\"ws://localhost:8000/ws/\"+room_id)\n\n  useEffect(() => {\n    /*\n    const getFriendChat = async() => {\n        const response = await fetch(\"http://localhost:8000/api/get-friend-chat\", { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: friend_id\n            })\n        })\n         const result = await response.json()\n        setRoomID(result['room_id'])\n        return result\n    }\n     const getMessages = async() => {\n        const response = await fetch(\"http://localhost:8000/api/get-messages\", { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                room_id: room_id\n            })\n        })\n         const result = await response.json()\n        setMessages(result['messages'])\n    }\n    getMessages()\n    getFriendChat()\n    */\n  }, []); //let socket = new WebSocket(\"ws://localhost:8000/ws/\"+room_id)\n\n  socket.onopen = () => {\n    console.log(\"YEEEE from the client\");\n  };\n\n  socket.onmessage = msg => {\n    let new_msg = JSON.parse(msg.data);\n    console.log(new_msg);\n    setMessages([...messages, new_msg]);\n  };\n\n  socket.onclose = event => {\n    console.log(\"socket closed connection: \", event);\n  };\n\n  const sendMsg = () => {\n    socket.send(msg);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container room-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Preview, {\n        alt: \"friend\",\n        size: \"img-large\",\n        isRoom: false,\n        friend_id: friend_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: messages.length === 0 ? null : Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          user: messages[key]['user'],\n          text: messages[key]['text']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(MessageBox, {\n        onChange: setMsg,\n        onClick: sendMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Friend, \"iSpKnIDvr9zIvE09XBC99thxw60=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Friend;\n\nvar _c;\n\n$RefreshReg$(_c, \"Friend\");","map":{"version":3,"sources":["/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js"],"names":["React","useEffect","useState","useRef","useHistory","useParams","Preview","Message","MessageBox","socket","WebSocket","Friend","props","history","msg","setMsg","messages","setMessages","room_id","setRoomID","router_data","friend_id","localStorage","getItem","push","user_id","user","onopen","console","log","onmessage","new_msg","JSON","parse","data","onclose","event","sendMsg","send","length","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\nimport {Message} from '../components/Message'\nimport {MessageBox} from '../components/MessageBox'\nimport './RoomFriend.scss'\n\nlet socket = new WebSocket(\"ws://localhost:8000/ws/234\")\n\nexport const Friend = (props) => {\n    const history = useHistory()\n    const [msg, setMsg] = useState()\n    const [messages, setMessages] = useState([])\n    const [room_id, setRoomID] = useState('')\n    //const socket = useRef(null);\n\n\n    let router_data = useParams()\n    let friend_id = router_data['friend_id']\n\n    if (!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n    \n    const user_id = props.user['_id'] // Get user id\n\n    //let socket = new WebSocket(\"ws://localhost:8000/ws/\"+room_id)\n\n    useEffect(() => {\n        /*\n        const getFriendChat = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-friend-chat\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: friend_id\n                })\n            })\n\n            const result = await response.json()\n            setRoomID(result['room_id'])\n            return result\n        }\n\n        const getMessages = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-messages\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: room_id\n                })\n            })\n\n            const result = await response.json()\n            setMessages(result['messages'])\n        }\n        getMessages()\n        getFriendChat()\n        */\n\n    },[])\n\n    //let socket = new WebSocket(\"ws://localhost:8000/ws/\"+room_id)\n    socket.onopen = () => {\n        console.log(\"YEEEE from the client\")\n    }\n    socket.onmessage = (msg) => {\n        let new_msg = JSON.parse(msg.data)\n        console.log(new_msg)\n        setMessages([...messages, new_msg])\n    }\n\n    socket.onclose = (event) => {\n        console.log(\"socket closed connection: \", event)\n    }\n\n    const sendMsg = () => {\n        socket.send(msg)\n    }\n\n    return (\n        <div className='container room-friend-container'>\n            <div className='row mt-5'>\n                <Preview alt='friend' size='img-large' isRoom={false} friend_id={friend_id} />\n            </div>\n\n            <div className='row'>\n                {messages.length === 0 ? null : Object.keys(messages).map(key => \n                    <div key={key} className=''>\n                        <Message user={messages[key]['user']} text={messages[key]['text']}/>\n                    </div>\n                )}\n            </div>\n\n            <div className='row'>\n                <MessageBox onChange={setMsg} onClick={sendMsg}/>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}