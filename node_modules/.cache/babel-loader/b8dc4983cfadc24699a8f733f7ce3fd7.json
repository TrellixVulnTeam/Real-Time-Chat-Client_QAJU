{"ast":null,"code":"var _jsxFileName = \"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Room.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Preview } from '../components/Preview';\nimport { Message } from '../components/Message';\nimport { MessageBox } from '../components/MessageBox';\nimport './RoomFriend.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Room = props => {\n  _s();\n\n  const history = useHistory();\n  const [msg, setMsg] = useState();\n  const [messages, setMessages] = useState('');\n  const [users, setUsers] = useState([]);\n  const socket = useRef(null);\n  props.setSidebarData(users); // get room id\n\n  let router_data = useParams();\n  let room_id = router_data['room_id'];\n\n  if (!localStorage.getItem(\"user\")) {\n    history.push('/login');\n  }\n\n  useEffect(() => {\n    const getRoomInfo = async () => {\n      const response = await fetch(\"http://localhost:8000/api/get-room-info\", {\n        // send post request to logout endpoint\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          room_id: room_id\n        })\n      });\n      const result = await response.json();\n      console.log(result['users']);\n      setUsers(result['users']);\n    };\n\n    getRoomInfo();\n\n    const getMessages = async () => {\n      const response = await fetch(\"http://localhost:8000/api/get-messages\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          room_id: room_id\n        })\n      });\n      const result = await response.json();\n      setMessages(result['messages']);\n    };\n\n    getMessages();\n    socket.current = new WebSocket(\"ws://localhost:8000/ws/\" + room_id);\n\n    socket.current.onopen = event => {\n      console.log(\"Connection at: \", \"ws://localhost:8000/ws/\" + room_id);\n    };\n\n    socket.current.onmessage = msg => {\n      let new_msg = JSON.parse(msg.data);\n      console.log(new_msg);\n      setMessages(prev => [...prev, new_msg]);\n    };\n\n    socket.current.onclose = event => {\n      console.log(\"socket closed connection: \", event);\n    };\n\n    return () => socket.current.close();\n  }, [room_id]);\n\n  const sendMsg = () => {\n    socket.current.send(msg);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container room-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Preview, {\n        alt: \"room\",\n        size: \"img-large\",\n        isRoom: true,\n        room_id: room_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: messages.length === 0 ? null : Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          user: messages[key]['user'],\n          text: messages[key]['text'],\n          isCurrUser: props.user['username'] === messages[key]['user']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(MessageBox, {\n        onChange: setMsg,\n        onClick: sendMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Room, \"ywR8+lDOdd4My3y6UyXqmATedf4=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Room.js"],"names":["React","useEffect","useState","useRef","useHistory","useParams","Preview","Message","MessageBox","Room","props","history","msg","setMsg","messages","setMessages","users","setUsers","socket","setSidebarData","router_data","room_id","localStorage","getItem","push","getRoomInfo","response","fetch","method","headers","credentials","body","JSON","stringify","result","json","console","log","getMessages","current","WebSocket","onopen","event","onmessage","new_msg","parse","data","prev","onclose","close","sendMsg","send","length","Object","keys","map","key","user"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\nimport {Message} from '../components/Message'\nimport {MessageBox} from '../components/MessageBox'\nimport './RoomFriend.scss'\n\nexport const Room = (props) => {\n    const history = useHistory()\n    const [msg, setMsg] = useState()\n    const [messages, setMessages] = useState('')\n    const [users, setUsers] = useState([])\n    const socket = useRef(null);\n    props.setSidebarData(users)\n    // get room id\n    let router_data = useParams()\n    let room_id = router_data['room_id']\n\n    if (!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n\n    useEffect(() => {\n        const getRoomInfo = async () => {\n            const response = await fetch(\"http://localhost:8000/api/get-room-info\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: room_id\n                })\n            })\n            const result = await response.json()\n            console.log(result['users'])\n            setUsers(result['users'])\n        }\n        getRoomInfo()\n\n        const getMessages = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-messages\", {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: room_id\n                })\n            })\n\n            const result = await response.json()\n            setMessages(result['messages']) \n        }\n\n        getMessages()\n\n        socket.current = new WebSocket(\"ws://localhost:8000/ws/\"+room_id)\n\n        socket.current.onopen = (event) => {\n            console.log(\"Connection at: \", \"ws://localhost:8000/ws/\"+room_id)\n        }\n        socket.current.onmessage = (msg) => {\n            let new_msg = JSON.parse(msg.data)\n            console.log(new_msg)\n            setMessages(prev => [...prev, new_msg])\n        }\n        socket.current.onclose = (event) => {\n            console.log(\"socket closed connection: \", event)\n        }\n        \n        return () => socket.current.close()\n    }, [room_id])\n\n\n    const sendMsg = () => {\n        socket.current.send(msg)\n    }\n\n    return (\n        <div className='container room-friend-container'>\n            <div className='row mt-5'>\n                <Preview alt='room' size='img-large' isRoom={true} room_id={room_id} />\n            </div>\n            <div className='row'>\n                {messages.length === 0 ? null : Object.keys(messages).map(key => \n                    <div key={key} className=''>\n                        <Message user={messages[key]['user']} text={messages[key]['text']} isCurrUser={props.user['username'] === messages[key]['user']} />\n                    </div>\n                )}\n            </div>\n\n            <div className='row'>\n                <MessageBox onChange={setMsg} onClick={sendMsg}/>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}