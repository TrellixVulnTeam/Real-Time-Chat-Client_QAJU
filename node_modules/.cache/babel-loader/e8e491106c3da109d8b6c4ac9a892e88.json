{"ast":null,"code":"var _jsxFileName = \"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Preview } from '../components/Preview';\nimport { Message } from '../components/Message';\nimport { MessageBox } from '../components/MessageBox';\nimport './RoomFriend.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Friend = props => {\n  _s();\n\n  const history = useHistory();\n  const [msg, setMsg] = useState();\n  let router_data = useParams();\n  let friend_id = router_data['friend_id'];\n\n  if (!localStorage.getItem(\"user\")) {\n    history.push('/login');\n  }\n  /*\n  const getMessages = async() => {\n      const response = await fetch(\"http://localhost:8000/api/get-messages\", { // send post request to logout endpoint\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          credentials: 'include',\n          body: JSON.stringify({\n              friend_id: friend_id\n          })\n      })\n       const result = await response.json()\n      return result\n  }\n  */\n\n\n  const user_id = props.user['_id']; // Get user id\n\n  const [messages, setMessages] = useState([]);\n  let socket = new WebSocket(\"ws://localhost:8000/ws/\" + room_id);\n  useEffect(() => {\n    socket.onopen = () => {\n      console.log(\"YEEEE from the client\");\n    };\n\n    socket.onmessage = msg => {\n      console.log(msg.data);\n      let new_msg = JSON.parse(msg.data);\n      setMessages([...messages, new_msg]);\n      console.log(messages);\n    };\n\n    socket.onclose = event => {\n      console.log(\"socket closed connection: \", event);\n    };\n\n    const getFriendChat = async () => {\n      const response = await fetch(\"http://localhost:8000/api/get-friend-chat\", {\n        // send post request to logout endpoint\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          friend_id: friend_id\n        })\n      });\n      const result = await response.json();\n      console.log('room: ', result);\n      return result;\n    };\n\n    const getMessages = async () => {\n      const response = await fetch(\"http://localhost:8000/api/get-messages\", {\n        // send post request to logout endpoint\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          room_id: room_id\n        })\n      });\n      const result = await response.json();\n      console.log('messages: ', result);\n    };\n\n    getMessages();\n  });\n\n  const sendMsg = () => {\n    socket.send(msg);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container room-friend-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Preview, {\n        alt: \"friend\",\n        size: \"img-large\",\n        isRoom: false,\n        friend_id: friend_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: messages.length === 0 ? null : Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          user: messages[key]['user'],\n          text: messages[key]['text']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(MessageBox, {\n        onChange: setMsg,\n        onClick: sendMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Friend, \"0nxbtgWGVYoD5LiBepwnz24g67E=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Friend;\n\nvar _c;\n\n$RefreshReg$(_c, \"Friend\");","map":{"version":3,"sources":["/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js"],"names":["React","useEffect","useState","useHistory","useParams","Preview","Message","MessageBox","Friend","props","history","msg","setMsg","router_data","friend_id","localStorage","getItem","push","user_id","user","messages","setMessages","socket","WebSocket","room_id","onopen","console","log","onmessage","data","new_msg","JSON","parse","onclose","event","getFriendChat","response","fetch","method","headers","credentials","body","stringify","result","json","getMessages","sendMsg","send","length","Object","keys","map","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,UAAR,EAAoBC,SAApB,QAAoC,kBAApC;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAO,mBAAP;;AAGA,OAAO,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,EAA9B;AAEA,MAAIW,WAAW,GAAGT,SAAS,EAA3B;AACA,MAAIU,SAAS,GAAGD,WAAW,CAAC,WAAD,CAA3B;;AAEA,MAAI,CAACE,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAL,EAAmC;AAC/BN,IAAAA,OAAO,CAACO,IAAR,CAAa,QAAb;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGI,QAAMC,OAAO,GAAGT,KAAK,CAACU,IAAN,CAAW,KAAX,CAAhB,CA3B6B,CA2BK;;AAElC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AAEA,MAAIoB,MAAM,GAAG,IAAIC,SAAJ,CAAc,4BAA0BC,OAAxC,CAAb;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,MAAM,CAACG,MAAP,GAAgB,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH,KAFD;;AAGAL,IAAAA,MAAM,CAACM,SAAP,GAAoBjB,GAAD,IAAS;AACxBe,MAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAG,CAACkB,IAAhB;AACA,UAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWrB,GAAG,CAACkB,IAAf,CAAd;AACAR,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcU,OAAd,CAAD,CAAX;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACH,KALD;;AAOAE,IAAAA,MAAM,CAACW,OAAP,GAAkBC,KAAD,IAAW;AACxBR,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CO,KAA1C;AACH,KAFD;;AAIA,UAAMC,aAAa,GAAG,YAAW;AAC7B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAAD,EAA8C;AAAE;AACxEC,QAAAA,MAAM,EAAE,MAD8D;AAEtEC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB,SAF6D;AAGtEC,QAAAA,WAAW,EAAE,SAHyD;AAItEC,QAAAA,IAAI,EAAEV,IAAI,CAACW,SAAL,CAAe;AACjB5B,UAAAA,SAAS,EAAEA;AADM,SAAf;AAJgE,OAA9C,CAA5B;AASA,YAAM6B,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAArB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBgB,MAAtB;AACA,aAAOA,MAAP;AACH,KAbD;;AAeA,UAAME,WAAW,GAAG,YAAW;AAC3B,YAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAD,EAA2C;AAAE;AACrEC,QAAAA,MAAM,EAAE,MAD2D;AAEnEC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB,SAF0D;AAGnEC,QAAAA,WAAW,EAAE,SAHsD;AAInEC,QAAAA,IAAI,EAAEV,IAAI,CAACW,SAAL,CAAe;AACjBlB,UAAAA,OAAO,EAAEA;AADQ,SAAf;AAJ6D,OAA3C,CAA5B;AASA,YAAMmB,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAArB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BgB,MAA1B;AACH,KAZD;;AAaAE,IAAAA,WAAW;AAEd,GA7CQ,CAAT;;AA+CA,QAAMC,OAAO,GAAG,MAAM;AAClBxB,IAAAA,MAAM,CAACyB,IAAP,CAAYpC,GAAZ;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACI,QAAC,OAAD;AAAS,QAAA,GAAG,EAAC,QAAb;AAAsB,QAAA,IAAI,EAAC,WAA3B;AAAuC,QAAA,MAAM,EAAE,KAA/C;AAAsD,QAAA,SAAS,EAAEG;AAAjE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBACKM,QAAQ,CAAC4B,MAAT,KAAoB,CAApB,GAAwB,IAAxB,GAA+BC,MAAM,CAACC,IAAP,CAAY9B,QAAZ,EAAsB+B,GAAtB,CAA0BC,GAAG,iBACzD;AAAe,QAAA,SAAS,EAAC,EAAzB;AAAA,+BACI,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEhC,QAAQ,CAACgC,GAAD,CAAR,CAAc,MAAd,CAAf;AAAsC,UAAA,IAAI,EAAEhC,QAAQ,CAACgC,GAAD,CAAR,CAAc,MAAd;AAA5C;AAAA;AAAA;AAAA;AAAA;AADJ,SAAUA,GAAV;AAAA;AAAA;AAAA;AAAA,cAD4B;AADpC;AAAA;AAAA;AAAA;AAAA,YALJ,eAaI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACI,QAAC,UAAD;AAAY,QAAA,QAAQ,EAAExC,MAAtB;AAA8B,QAAA,OAAO,EAAEkC;AAAvC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CAvGM;;GAAMtC,M;UACOL,U,EAGEC,S;;;KAJTI,M","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\nimport {Message} from '../components/Message'\nimport {MessageBox} from '../components/MessageBox'\nimport './RoomFriend.scss'\n\n\nexport const Friend = (props) => {\n    const history = useHistory()\n    const [msg, setMsg] = useState()\n\n    let router_data = useParams()\n    let friend_id = router_data['friend_id']\n\n    if (!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n\n    /*\n    const getMessages = async() => {\n        const response = await fetch(\"http://localhost:8000/api/get-messages\", { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: friend_id\n            })\n        })\n\n        const result = await response.json()\n        return result\n    }\n    */\n    \n    const user_id = props.user['_id'] // Get user id\n\n    const [messages, setMessages] = useState([])\n\n    let socket = new WebSocket(\"ws://localhost:8000/ws/\"+room_id)\n\n    useEffect(() => {\n        socket.onopen = () => {\n            console.log(\"YEEEE from the client\")\n        }\n        socket.onmessage = (msg) => {\n            console.log(msg.data)\n            let new_msg = JSON.parse(msg.data)\n            setMessages([...messages, new_msg])\n            console.log(messages)\n        }\n\n        socket.onclose = (event) => {\n            console.log(\"socket closed connection: \", event)\n        }\n\n        const getFriendChat = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-friend-chat\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: friend_id\n                })\n            })\n\n            const result = await response.json()\n            console.log('room: ', result)\n            return result\n        }\n\n        const getMessages = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-messages\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: room_id\n                })\n            })\n\n            const result = await response.json()\n            console.log('messages: ', result)\n        }\n        getMessages()\n\n    })\n\n    const sendMsg = () => {\n        socket.send(msg)\n    }\n\n    return (\n        <div className='container room-friend-container'>\n            <div className='row mt-5'>\n                <Preview alt='friend' size='img-large' isRoom={false} friend_id={friend_id} />\n            </div>\n\n            <div className='row'>\n                {messages.length === 0 ? null : Object.keys(messages).map(key => \n                    <div key={key} className=''>\n                        <Message user={messages[key]['user']} text={messages[key]['text']}/>\n                    </div>\n                )}\n            </div>\n\n            <div className='row'>\n                <MessageBox onChange={setMsg} onClick={sendMsg}/>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}