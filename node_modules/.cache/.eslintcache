[{"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/index.js":"1","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/reportWebVitals.js":"2","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/App.js":"3","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Navbar.js":"4","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Login.js":"5","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Button.js":"6","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Home.js":"7","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Register.js":"8","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js":"9","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Message.js":"10","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/MessageBox.js":"11","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Room.js":"12","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/SidebarData.js":"13","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Preview.js":"14","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Search.js":"15","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/CreateRoom.js":"16"},{"size":500,"mtime":1630696633547,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1630696633547,"results":"19","hashOfConfig":"18"},{"size":2108,"mtime":1632103629258,"results":"20","hashOfConfig":"18"},{"size":3220,"mtime":1632013598327,"results":"21","hashOfConfig":"18"},{"size":2236,"mtime":1632092954488,"results":"22","hashOfConfig":"18"},{"size":738,"mtime":1632092463615,"results":"23","hashOfConfig":"18"},{"size":9872,"mtime":1632185175655,"results":"24","hashOfConfig":"18"},{"size":2854,"mtime":1631396248410,"results":"25","hashOfConfig":"18"},{"size":3526,"mtime":1632185176272,"results":"26","hashOfConfig":"18"},{"size":401,"mtime":1631736241537,"results":"27","hashOfConfig":"18"},{"size":868,"mtime":1631953517113,"results":"28","hashOfConfig":"18"},{"size":2696,"mtime":1632185176952,"results":"29","hashOfConfig":"18"},{"size":230,"mtime":1631251758178,"results":"30","hashOfConfig":"18"},{"size":10835,"mtime":1632184493759,"results":"31","hashOfConfig":"18"},{"size":2344,"mtime":1632170836594,"results":"32","hashOfConfig":"18"},{"size":1631,"mtime":1632171934829,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"u3jw5y",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/index.js",[],["69","70"],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/reportWebVitals.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/App.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Navbar.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Login.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Button.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Home.js",["71","72"],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Register.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Message.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/MessageBox.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Room.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/SidebarData.js",[],["73","74"],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Preview.js",["75"],"import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport { MenuItem } from '@mui/material';\n\n//import FormControl from '@mui/material/FormControl';\n//import InputLabel from '@mui/material/InputLabel';\n\nimport '../pages/Home.scss'\nimport './Preview.scss'\n\nconst SIZES = ['img-large','img-small']\n\nexport const Preview = (props) => {\n    const getImgSize = SIZES.includes(props.size) ? props.size : SIZES[0]; // get button style. default to primary\n    const [isFriend, setIsFriend] = useState(false)\n    const [previewPic, setPreviewPic] = useState('')\n    const [previewName, setPreviewName] = useState('')\n    const [friends, setFriends] = useState(false)\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const history = useHistory()\n\n    // when friend is clicked function\n    useEffect(() => {\n        let isMounted = true\n        const getFriends = async() => {\n            const response = await fetch(\"http://localhost:8000/api/get-friends\", {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n\n            const result = await response.json()\n            if (isMounted) {\n                setFriends(result['friends']) \n            }\n        }\n\n        const checkFriend = async () => {\n            const response = await fetch(\"http://localhost:8000/api/check-friend\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: props.friend_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (isMounted) {\n                if (result['message'] === 'true') {\n                    setIsFriend(true)\n                } else {\n                    setIsFriend(false)\n                }\n            }\n        }\n        const getFriendInfo = async () => {\n            const response = await fetch(\"http://localhost:8000/api/get-friend-info\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: props.friend_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (result['message'] === 'Could Not Find User') {\n                console.log(result)\n            } else {\n                if (isMounted) {\n                    setPreviewName(result['username'])\n                    setPreviewPic(result['profile_pic'])\n                }\n            }\n        }\n        const getRoomInfo = async () => {\n            const response = await fetch(\"http://localhost:8000/api/get-room-info\", { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: props.room_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (result['message'] === 'Could Not Find Room') {\n                console.log(result)\n            } else {\n                if (isMounted) {\n                    setPreviewName(result['room_name'])\n                    setPreviewPic(result['room_pic'])\n                }\n            }\n        }\n\n        if (isMounted) {\n            if (props.isRoom === true) {\n                getRoomInfo().catch(setPreviewName(''), setPreviewPic('default_room.jpeg'))\n                getFriends().catch(setFriends(''))\n            } else {\n                checkFriend().catch(setIsFriend(false))\n                getFriendInfo().catch(setPreviewName(''), setPreviewPic('default.jpeg'))\n            }\n        }\n\n        return () => { isMounted=false }\n\n    }, [props.friend_id, props.room_id, props.isRoom])\n\n    const addFriend = async() => {\n        const response = await fetch(\"http://localhost:8000/api/add-friend\", { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: props.friend_id\n            })\n        })\n\n        const result = await response.json();\n        props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": props.friend_id, \"req\": \"add-friend\", \"in_pending\":props.inPending.toString()})\n\n        //window.location.reload()\n    }\n\n    const removeFriend = async() => {\n        const response = await fetch(\"http://localhost:8000/api/remove-friend\", { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: props.friend_id\n            })\n        })\n\n        const result = await response.json()\n        console.log(result);\n        props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": props.friend_id, \"req\": \"remove-friend\"})\n\n        //history.push('/')\n        //window.location.reload();\n    }\n\n\n    const goToMessages = () => {\n        history.push('/friend/' + props.friend_id)\n    }\n\n    const leaveRoom = async() => {\n        const response = await fetch(\"http://localhost:8000/api/leave-room\", { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                room_id: props.room_id\n            })\n        })\n        window.location.reload();\n        return response\n    }\n\n    const goToChat = async() => {\n        history.push('/room/' + props.room_id)\n    }\n\n    const sendRoomInvite = async(event) => {\n        console.log('event target: ', event.target)\n        console.log('event target value: ', event.target.id)\n        const response = await fetch(\"http://localhost:8000/api/add-to-room\", { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: event.target.id,\n                room_id: props.room_id\n            })\n        })\n\n        const result = await response.json();\n        console.log(result)\n        if (result[\"message\"] !== \"Friend is already in room\") {\n            props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": event.target.id, \"room_id\": props.room_id, \"req\": \"add-to-room\"})\n        }\n        //window.location.reload()\n    }\n\n\n    return (\n        <div>\n            <div className='friend-container mt-2' id={props.id}>\n                <img src={'../'+previewPic} alt='friend' className={`${getImgSize}`} id={props.id} />\n                { props.overlay ?\n                    !props.isRoom ? // if preview for friend:\n                        getImgSize === 'img-large' ? // if image is large:\n                        <div className={`overlay ${getImgSize}`}>  \n                        <div className='col'>\n                            {isFriend === false ? // if they are not friends:\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='secondary' size='small' onClick={addFriend}>Add Friend</Button>\n                                :   // if they are friends:\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='secondary' size='small' onClick={goToMessages}>Message</Button>\n                            }\n                            {isFriend === true ?\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='error' size='small' onClick={removeFriend}>Remove Friend</Button>\n                                : null}\n                        </div>\n                        </div>\n                        : null // if small-image\n            : // if preview for Room: }\n                <div className={`overlay ${getImgSize}`}>  \n                    <div className='col'>\n                            <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-3' variant='contained' color='secondary' size='small' onClick={goToChat}>Chat</Button>\n                            <Button\n                                style={{margin: '0 auto', display: \"flex\"}}\n                                variant='contained'\n                                color='secondary'\n                                className='overlay-btn mt-2'\n                                id=\"basic-button\"\n                                aria-controls=\"basic-menu\"\n                                aria-haspopup=\"true\"\n                                aria-expanded={open ? 'true' : undefined}\n                                onClick={handleClick}\n                            >\n                            Invite Friend\n                            </Button>\n                            <Menu\n                                id=\"basic-menu\"\n                                anchorEl={anchorEl}\n                                open={open}\n                                onClose={handleClose}\n                                MenuListProps={{'aria-labelledby': 'basic-button',}}\n                                \n                            >\n                                {Object.keys(friends).map(key => \n                                    <MenuItem key={key} sx={{backgroundColor: '#242424', '&:hover': {backgroundColor: '#2d2d2d'}}} onClick={(e) => sendRoomInvite(e)}  >\n                                        <Preview alt='friend' size='img-small' isRoom={false} friend_id={friends[key]} id={friends[key]} />\n                                    </MenuItem>\n                                )}\n\n                            </Menu>\n                            <Button style={{margin: '0 auto', display: \"flex\"}} variant='contained' color='error' className='overlay-btn mt-2' onClick={leaveRoom}>Leave Room</Button>\n                    </div>\n                </div> : null } {/* if no overlay, set to null */}\n\n        </div>\n\n            <div className='friend-name'>\n                <p>{previewName}</p>\n            </div>\n        </div>\n    )\n}\n","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Search.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/CreateRoom.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":26,"column":12,"nodeType":"82","messageId":"83","endLine":26,"endColumn":15},{"ruleId":"84","severity":1,"message":"85","line":158,"column":8,"nodeType":"86","endLine":158,"endColumn":10,"suggestions":"87"},{"ruleId":"76","replacedBy":"88"},{"ruleId":"78","replacedBy":"89"},{"ruleId":"80","severity":1,"message":"90","line":135,"column":15,"nodeType":"82","messageId":"83","endLine":135,"endColumn":21},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'req' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'friends', 'props.user', 'requests', and 'setReq'. Either include them or remove the dependency array.","ArrayExpression",["93"],["91"],["92"],"'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [friends, props.user, requests, setReq]",{"range":"96","text":"97"},[7259,7261],"[friends, props.user, requests, setReq]"]