[{"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/index.js":"1","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/reportWebVitals.js":"2","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/App.js":"3","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Login.js":"4","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Register.js":"5","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Home.js":"6","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js":"7","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Room.js":"8","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Navbar.js":"9","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Button.js":"10","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/CreateRoom.js":"11","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Preview.js":"12","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Search.js":"13","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/MessageBox.js":"14","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Message.js":"15"},{"size":500,"mtime":1630696633547,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1630696633547,"results":"18","hashOfConfig":"17"},{"size":2129,"mtime":1632434862247,"results":"19","hashOfConfig":"17"},{"size":2257,"mtime":1632434839043,"results":"20","hashOfConfig":"17"},{"size":2875,"mtime":1632434832327,"results":"21","hashOfConfig":"17"},{"size":9929,"mtime":1632434882497,"results":"22","hashOfConfig":"17"},{"size":3563,"mtime":1632434876587,"results":"23","hashOfConfig":"17"},{"size":2712,"mtime":1632434819593,"results":"24","hashOfConfig":"17"},{"size":3262,"mtime":1632434808710,"results":"25","hashOfConfig":"17"},{"size":738,"mtime":1632344321213,"results":"26","hashOfConfig":"17"},{"size":1652,"mtime":1632434814170,"results":"27","hashOfConfig":"17"},{"size":11003,"mtime":1632447509173,"results":"28","hashOfConfig":"17"},{"size":2365,"mtime":1632434773357,"results":"29","hashOfConfig":"17"},{"size":868,"mtime":1632346447303,"results":"30","hashOfConfig":"17"},{"size":401,"mtime":1632346437950,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xj0omi",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/index.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/reportWebVitals.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/App.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Login.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Register.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Home.js",["64","65"],"import React, {useState, useEffect, useRef} from 'react'\nimport useStateWithCallback from 'use-state-with-callback';\n//import {Button} from '../components/Button'\nimport {useHistory} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\n//import Alert from '@material-ui/lab/Alert'\nimport {Search} from '../components/Search'\nimport {CreateRoom} from '../components/CreateRoom'\nimport './Home.scss'\n\nexport const Home = (props) => {\n    /*\n    const socket = new WebSocket(\"ws://localhost:8000/ws/\")\n    const socketRef = useRef();\n    socketRef.current = socket;\n    */\n    const socket = useRef(null);\n\n    const [search, setSearch] = useState(false)\n    const [createRoom, setCreateRoom] = useState(false)\n    const [friends, setFriends] = useState('')\n    const [rooms, setRooms] = useState([])\n    const [requests, setRequests] = useState('') // friend requests\n    const requestsRef = useRef();\n    requestsRef.current = requests;\n    const [req, setReq] = useStateWithCallback(null, req => {\n        if (req !== null && socket.current.readyState === 1) {\n            socket.current.send(JSON.stringify(req));\n            setReq(null);\n        } \n    });\n    const history = useHistory()\n    props.setRoomID(null)\n\n    if(!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n\n    const  showSearchWindow = () => setSearch(!search) // toggle search bar\n    const  showRoomWindow = () => setCreateRoom(!createRoom) // toggle search bar\n    const searchClass = search ? 'rotate-icon' : '';\n    const roomClass = createRoom ? 'rotate-icon' : '';\n\n    console.log(\"requests in home: \", requests)\n\n    useEffect(() => {\n        let isMounted = true;\n        const getFriends = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friends`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n\n            const result = await response.json()\n            if (isMounted) {\n                setFriends(result['friends']) \n            }\n        }\n        const getFriendReqs = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friend-reqs`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n            const result = await response.json()\n            if (isMounted) {\n                setRequests(result['requests'])\n            }\n        }\n        const getRooms = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-rooms`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n\n            const result = await response.json()\n            if (isMounted) {\n                setRooms(result['rooms']) \n            }\n        }\n\n        if (isMounted) {\n            getFriends().catch(setFriends(''))\n            getFriendReqs().catch(setRequests(''))\n            getRooms().catch(setRooms([]))\n        }\n\n        socket.current = new WebSocket(`ws://${process.env.REACT_APP_SERVER_URL}/ws`)\n        socket.current.onopen = (event) => {\n            console.log(\"Connected to ws\")\n            //socket.current.send(JSON.stringify({friend_id: 0+'', req: \"HELP ME\"}))\n        }\n        socket.current.onmessage = (request) => {\n            let new_req = JSON.parse(request.data)\n            console.log(\"requests: \", requests)\n            switch(new_req['req']) {\n                case 'add-friend':\n                    console.log(\"requests: \", requestsRef.current)\n                    let filteredRequests = [];\n                    let isInRequests = false;\n                    // check if friend is in requests\n                    Object.keys(requestsRef.current).map(key => {\n                        if (requestsRef.current[key] !== new_req['friend_id']) { // if friend is not current request:\n                            filteredRequests.push(requests[key])   // add to array\n                        } else {\n                            isInRequests = true;                  // otherwise: set isInRequests to true\n                        }\n                        return requestsRef.current[key]\n                    })\n                    console.log(\"isInRequests: \", isInRequests)\n                    if (new_req['sender_id'] === props.user['_id']) {           // if this client is the sender:\n                        if(isInRequests) {                                          // if accepting friend request:\n                            console.log(\"Accepting friend request\")\n                            console.log(\"new requests: \", filteredRequests)\n                            setRequests(filteredRequests)                               // setRequests to array without friend that was just added\n                            setFriends(prev => [...prev, new_req['friend_id']])         // setFriends with newly added friend\n                        }                                                       \n                    } else {                                                    // if this client is the receiver:\n                        if(new_req['in_pending'] === 'true') {                      // if other client accepted friend request:\n                            console.log(\"Friend accepted request\")\n                            setFriends(prev => [...prev, new_req['friend_id']])         // setFriends with newly added friend\n                        } else {                                                // if received friend request from other client:\n                            console.log(\"Received friend request\")\n                            setRequests(prev => [...prev, new_req['friend_id']])    // setRequests with client who sent request\n                        }\n                    }\n                    break;\n                case 'remove-friend':\n                    let filteredArray = [];\n                    Object.keys(friends).map(key => {\n                        console.log(\"friend: \", friends[key])\n                        if (friends[key] !== new_req['friend_id']) {\n                           filteredArray.push(friends[key])\n                        }\n                        return friends[key]\n                    })\n                    console.log(\"filtered array: \", filteredArray)\n                    setFriends(filteredArray)\n                    break;\n                case 'add-to-room':\n                    console.log(\"In add-to-room\")\n                    console.log(\"Is receiver: \", new_req['sender_id'] !== props.user['_id'])\n                    if (new_req['sender_id'] !== props.user['_id']) {    // if this client is not the sender:\n                        window.location.reload();\n                        //setRooms(prev => [...prev, new_req['room_id']])    // setRequests with client who sent request (this doesn't work, very annoying)\n                    }\n                    break;\n                default:\n                    setReq(null)\n                    break;\n            }\n        }\n\n        socket.current.onclose = (event) => {\n            console.log(\"socket closed connection: \", event)\n        }\n\n        return () => { isMounted=false }\n    }, [])\n\n    //const sendReq = () =>{ console.log(\"req in sendReq: \", req); socket.current.send(req); }\n\n    //console.log(\"req in home: \", req)\n\n    return(\n        <div className='container'>\n            <div className=\"rooms-header\">\n                <h2 className=\"rooms-header-text mb-0\">Friends</h2>\n                <i className={`fas fa-plus-circle add-btn mb-0 ${searchClass}`} onClick={showSearchWindow} />\n            </div>\n            <div className=\"search-window-container\">\n                <Search search={search} setSearch={setSearch} setReq={ data => {setReq(data);} } user={props.user} />\n            </div>\n            <div className='row'>\n                {friends === null ? null : Object.keys(friends).map(key => \n                    <div key={key} className='col-sm-12 col-md-4 col-lg-2 px-0 mx-3'>\n                        <Preview alt='friend' size='img-large' isRoom={false} friend_id={friends[key]} setReq={ data => {setReq(data);} } user={props.user} inPending={false} overlay={true} />\n                    </div>\n                )}\n\n            </div>\n\n\n            <div className='rooms-header'>\n                <h2 className=\"rooms-header-text mt-2\">Rooms</h2>\n                <i className={`fas fa-plus-circle add-btn mb-0 ${roomClass}`} onClick={showRoomWindow} />\n            </div>\n            <div className=\"search-window-container\">\n                <CreateRoom createRoom={createRoom} />\n            </div>\n            <div className='row'>\n                {rooms === null ? null : Object.keys(rooms).map(key => \n                    <div key={key} className='col-sm-12 col-md-4 col-lg-2 px-0 mx-3'>\n                        <Preview alt='default_room.jpeg' size='img-large' isRoom={true} room_id={rooms[key]} setReq={ data => {setReq(data);} } user={props.user} overlay={true} />\n                    </div>\n                )}\n            </div>\n\n\n            <div className=\"rooms-header\">\n                <h2 className=\"rooms-header-text mb-0\">Pending Friends</h2>\n            </div>\n            <div className='row'>\n                {requests === null ? null : Object.keys(requests).map(key =>\n                    <div className='col-sm-12 col-md-4 col-lg-2 px-0 mx-3' key={key}>\n                        <Preview src='default_pic.jpeg' alt='friend' size='img-large' name='username' isRoom={false} friend_id={requests[key]} setReq={ data => {setReq(data);} } user={props.user} inPending={true} overlay={true} />\n                    </div>\n                )}\n            </div>\n\n            <p className=\"mt-5 mb-3 mx-auto text-muted\">&copy; 2017–2021</p>\n\n        </div>\n    )\n}\n","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Friend.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/pages/Room.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Navbar.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Button.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/CreateRoom.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Preview.js",["66"],"import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport { MenuItem } from '@mui/material';\n\n//import FormControl from '@mui/material/FormControl';\n//import InputLabel from '@mui/material/InputLabel';\n\nimport '../pages/Home.scss'\nimport './Preview.scss'\n\nconst SIZES = ['img-large','img-small']\n\nexport const Preview = (props) => {\n    const getImgSize = SIZES.includes(props.size) ? props.size : SIZES[0]; // get button style. default to primary\n    const [isFriend, setIsFriend] = useState(false)\n    const [previewPic, setPreviewPic] = useState('')\n    const [previewName, setPreviewName] = useState('')\n    const [friends, setFriends] = useState(false)\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const history = useHistory()\n\n    // when friend is clicked function\n    useEffect(() => {\n        let isMounted = true\n        const getFriends = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friends`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n\n            const result = await response.json()\n            if (isMounted) {\n                setFriends(result['friends']) \n            }\n        }\n\n        const checkFriend = async () => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/check-friend`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: props.friend_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (isMounted) {\n                if (result['message'] === 'true') {\n                    setIsFriend(true)\n                } else {\n                    setIsFriend(false)\n                }\n            }\n        }\n        const getFriendInfo = async () => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friend-info`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: props.friend_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (result['message'] === 'Could Not Find User') {\n                console.log(result)\n            } else {\n                if (isMounted) {\n                    setPreviewName(result['username'])\n                    setPreviewPic(result['profile_pic'])\n                }\n            }\n        }\n        const getRoomInfo = async () => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-room-info`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: props.room_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (result['message'] === 'Could Not Find Room') {\n                console.log(result)\n            } else {\n                if (isMounted) {\n                    setPreviewName(result['room_name'])\n                    setPreviewPic(result['room_pic'])\n                }\n            }\n        }\n\n        if (isMounted) {\n            if (props.isRoom === true) {\n                getRoomInfo().catch(setPreviewName(''), setPreviewPic('default_room.jpeg'))\n                getFriends().catch(setFriends(''))\n            } else {\n                checkFriend().catch(setIsFriend(false))\n                getFriendInfo().catch(setPreviewName(''), setPreviewPic('default.jpeg'))\n            }\n        }\n\n        return () => { isMounted=false }\n\n    }, [props.friend_id, props.room_id, props.isRoom])\n\n    const addFriend = async() => {\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/add-friend`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: props.friend_id\n            })\n        })\n\n        const result = await response.json();\n        props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": props.friend_id, \"req\": \"add-friend\", \"in_pending\":props.inPending.toString()})\n\n        //window.location.reload()\n    }\n\n    const removeFriend = async() => {\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/remove-friend`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: props.friend_id\n            })\n        })\n\n        const result = await response.json()\n        console.log(result);\n        props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": props.friend_id, \"req\": \"remove-friend\"})\n\n        //history.push('/')\n        //window.location.reload();\n    }\n\n\n    const goToMessages = () => {\n        history.push('/friend/' + props.friend_id)\n    }\n\n    const leaveRoom = async() => {\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/leave-room`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                room_id: props.room_id\n            })\n        })\n        window.location.reload();\n        return response\n    }\n\n    const goToChat = async() => {\n        history.push('/room/' + props.room_id)\n    }\n\n    const sendRoomInvite = async(event) => {\n        console.log('event target: ', event.target)\n        console.log('event target value: ', event.target.id)\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/add-to-room`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: event.target.id,\n                room_id: props.room_id\n            })\n        })\n\n        const result = await response.json();\n        console.log(result)\n        if (result[\"message\"] !== \"Friend is already in room\") {\n            props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": event.target.id, \"room_id\": props.room_id, \"req\": \"add-to-room\"})\n        }\n        //window.location.reload()\n    }\n\n\n    return (\n        <div>\n            <div className='friend-container mt-2' id={props.id}>\n                <img src={'../'+previewPic} alt='friend' className={`${getImgSize}`} id={props.id} />\n                { props.overlay ?\n                    !props.isRoom ? // if preview for friend:\n                        getImgSize === 'img-large' ? // if image is large:\n                        <div className={`overlay ${getImgSize}`}>  \n                        <div className='col'>\n                            {isFriend === false ? // if they are not friends:\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='secondary' size='small' onClick={addFriend}>Add Friend</Button>\n                                :   // if they are friends:\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='secondary' size='small' onClick={goToMessages}>Message</Button>\n                            }\n                            {isFriend === true ?\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='error' size='small' onClick={removeFriend}>Remove Friend</Button>\n                                : null}\n                        </div>\n                        </div>\n                        : null // if small-image\n            : // if preview for Room: }\n                <div className={`overlay ${getImgSize}`}>  \n                    <div className='col'>\n                            <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-3' variant='contained' color='secondary' size='small' onClick={goToChat}>Chat</Button>\n                            <Button\n                                style={{margin: '0 auto', display: \"flex\"}}\n                                variant='contained'\n                                color='secondary'\n                                className='overlay-btn mt-2'\n                                id=\"basic-button\"\n                                aria-controls=\"basic-menu\"\n                                aria-haspopup=\"true\"\n                                aria-expanded={open ? 'true' : undefined}\n                                onClick={handleClick}\n                            >\n                            Invite Friend\n                            </Button>\n                            <Menu\n                                id=\"basic-menu\"\n                                anchorEl={anchorEl}\n                                open={open}\n                                onClose={handleClose}\n                                MenuListProps={{'aria-labelledby': 'basic-button',}}\n                                \n                            >\n                                {Object.keys(friends).map(key => \n                                    <MenuItem key={key} sx={{backgroundColor: '#242424', '&:hover': {backgroundColor: '#2d2d2d'}}} onClick={(e) => sendRoomInvite(e)}  >\n                                        <Preview alt='friend' size='img-small' isRoom={false} friend_id={friends[key]} id={friends[key]} />\n                                    </MenuItem>\n                                )}\n\n                            </Menu>\n                            <Button style={{margin: '0 auto', display: \"flex\"}} variant='contained' color='error' className='overlay-btn mt-2' onClick={leaveRoom}>Leave Room</Button>\n                    </div>\n                </div> : null } {/* if no overlay, set to null */}\n\n        </div>\n\n            <div className='friend-name'>\n                <p>{previewName}</p>\n            </div>\n        </div>\n    )\n}\n","/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Search.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/MessageBox.js",[],"/home/bzeeno/Code/Go/RealTimeChat/frontend/src/components/Message.js",[],{"ruleId":"67","severity":1,"message":"68","line":26,"column":12,"nodeType":"69","messageId":"70","endLine":26,"endColumn":15},{"ruleId":"71","severity":1,"message":"72","line":158,"column":8,"nodeType":"73","endLine":158,"endColumn":10,"suggestions":"74"},{"ruleId":"67","severity":1,"message":"75","line":135,"column":15,"nodeType":"69","messageId":"70","endLine":135,"endColumn":21},"no-unused-vars","'req' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'friends', 'props.user', 'requests', and 'setReq'. Either include them or remove the dependency array.","ArrayExpression",["76"],"'result' is assigned a value but never used.",{"desc":"77","fix":"78"},"Update the dependencies array to be: [friends, props.user, requests, setReq]",{"range":"79","text":"80"},[7316,7318],"[friends, props.user, requests, setReq]"]