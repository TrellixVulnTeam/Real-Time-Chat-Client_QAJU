{"version":3,"sources":["components/Preview.js","components/Navbar.js","components/Button.js","components/Search.js","components/CreateRoom.js","pages/Home.js","pages/Login.js","pages/Register.js","components/Message.js","components/MessageBox.js","pages/Friend.js","pages/Room.js","App.js","reportWebVitals.js","index.js"],"names":["SIZES","Preview","props","getImgSize","includes","size","useState","isFriend","setIsFriend","previewPic","setPreviewPic","previewName","setPreviewName","friends","setFriends","React","anchorEl","setAnchorEl","open","Boolean","history","useHistory","useEffect","isMounted","getFriends","a","fetch","process","headers","credentials","response","json","result","checkFriend","method","body","JSON","stringify","friend_id","getFriendInfo","console","log","getRoomInfo","room_id","isRoom","catch","addFriend","setReq","user","inPending","toString","removeFriend","leaveRoom","window","location","reload","goToChat","push","sendRoomInvite","event","target","id","className","src","alt","overlay","style","margin","display","variant","color","onClick","aria-controls","aria-haspopup","aria-expanded","undefined","currentTarget","Menu","onClose","MenuListProps","Object","keys","map","key","MenuItem","sx","backgroundColor","e","Navbar","sidebar","setSidebar","users","setUsers","showSidebar","menu","logout","setUser","localStorage","removeItem","to","length","STYLES","Button","children","type","buttonStyle","buttonSize","my","mx","classes","getButtonStyle","getButtonSize","Search","error","setError","username","setUsername","receivedData","setReceivedData","data","setData","submit","preventDefault","search","align","TextField","label","maxRows","onChange","value","name","CreateRoom","roomName","setRoomName","createRoom","Home","socket","useRef","setSearch","setCreateRoom","rooms","setRooms","requests","setRequests","requestsRef","current","useStateWithCallback","req","readyState","send","setRoomID","getItem","searchClass","roomClass","getFriendReqs","getRooms","WebSocket","onopen","onmessage","request","new_req","parse","filteredRequests","isInRequests","prev","filteredArray","onclose","Login","redirect","setRedirect","email","setEmail","pass","setPass","password","message","setItem","onSubmit","placeholder","required","Register","setConfirmPass","e_val","confirm_pass","validatePass","link","Message","getColor","isCurrUser","text","MessageBox","fullWidth","Friend","msg","setMsg","messages","setMessages","setRoomId","useParams","getFriendChat","getMessages","new_msg","Room","App","fetchUser","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54e8717d.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport { MenuItem } from '@mui/material';\n\n//import FormControl from '@mui/material/FormControl';\n//import InputLabel from '@mui/material/InputLabel';\n\nimport '../pages/Home.scss'\nimport './Preview.scss'\n\nconst SIZES = ['img-large','img-small']\n\nexport const Preview = (props) => {\n    const getImgSize = SIZES.includes(props.size) ? props.size : SIZES[0]; // get button style. default to primary\n    const [isFriend, setIsFriend] = useState(false)\n    const [previewPic, setPreviewPic] = useState('')\n    const [previewName, setPreviewName] = useState('')\n    const [friends, setFriends] = useState(false)\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const history = useHistory()\n\n    // when friend is clicked function\n    useEffect(() => {\n        let isMounted = true\n        const getFriends = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friends`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n\n            const result = await response.json()\n            if (isMounted) {\n                setFriends(result['friends']) \n            }\n        }\n\n        const checkFriend = async () => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/check-friend`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: props.friend_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (isMounted) {\n                if (result['message'] === 'true') {\n                    setIsFriend(true)\n                } else {\n                    setIsFriend(false)\n                }\n            }\n        }\n        const getFriendInfo = async () => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friend-info`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: props.friend_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (result['message'] === 'Could Not Find User') {\n                console.log(result)\n            } else {\n                if (isMounted) {\n                    setPreviewName(result['username'])\n                    setPreviewPic(result['profile_pic'])\n                }\n            }\n        }\n        const getRoomInfo = async () => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-room-info`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: props.room_id\n                })\n            })\n\n            const result = await response.json()\n\n            if (result['message'] === 'Could Not Find Room') {\n                console.log(result)\n            } else {\n                if (isMounted) {\n                    setPreviewName(result['room_name'])\n                    setPreviewPic(result['room_pic'])\n                }\n            }\n        }\n\n        if (isMounted) {\n            if (props.isRoom === true) {\n                getRoomInfo().catch(setPreviewName(''), setPreviewPic('default_room.jpeg'))\n                getFriends().catch(setFriends(''))\n            } else {\n                checkFriend().catch(setIsFriend(false))\n                getFriendInfo().catch(setPreviewName(''), setPreviewPic('default.jpeg'))\n            }\n        }\n\n        return () => { isMounted=false }\n\n    }, [props.friend_id, props.room_id, props.isRoom])\n\n    const addFriend = async() => {\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/add-friend`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: props.friend_id\n            })\n        })\n\n        const result = await response.json();\n        props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": props.friend_id, \"req\": \"add-friend\", \"in_pending\":props.inPending.toString()})\n\n        //window.location.reload()\n    }\n\n    const removeFriend = async() => {\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/remove-friend`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: props.friend_id\n            })\n        })\n\n        const result = await response.json()\n        console.log(result);\n        props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": props.friend_id, \"req\": \"remove-friend\"})\n\n        //history.push('/')\n        //window.location.reload();\n    }\n\n\n    const goToMessages = () => {\n        history.push('/friend/' + props.friend_id)\n    }\n\n    const leaveRoom = async() => {\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/leave-room`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                room_id: props.room_id\n            })\n        })\n        window.location.reload();\n        return response\n    }\n\n    const goToChat = async() => {\n        history.push('/room/' + props.room_id)\n    }\n\n    const sendRoomInvite = async(event) => {\n        console.log('event target: ', event.target)\n        console.log('event target value: ', event.target.id)\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/add-to-room`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                friend_id: event.target.id,\n                room_id: props.room_id\n            })\n        })\n\n        const result = await response.json();\n        console.log(result)\n        if (result[\"message\"] !== \"Friend is already in room\") {\n            props.setReq({\"sender_id\": props.user['_id'], \"friend_id\": event.target.id, \"room_id\": props.room_id, \"req\": \"add-to-room\"})\n        }\n        //window.location.reload()\n    }\n\n\n    return (\n        <div>\n            <div className='friend-container mt-2' id={props.id}>\n                <img src={'../'+previewPic} alt='friend' className={`${getImgSize}`} id={props.id} />\n                { props.overlay ?\n                    !props.isRoom ? // if preview for friend:\n                        getImgSize === 'img-large' ? // if image is large:\n                        <div className={`overlay ${getImgSize}`}>  \n                        <div className='col'>\n                            {isFriend === false ? // if they are not friends:\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='secondary' size='small' onClick={addFriend}>Add Friend</Button>\n                                :   // if they are friends:\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='secondary' size='small' onClick={goToMessages}>Message</Button>\n                            }\n                            {isFriend === true ?\n                                    <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-4' variant='contained' color='error' size='small' onClick={removeFriend}>Remove Friend</Button>\n                                : null}\n                        </div>\n                        </div>\n                        : null // if small-image\n            : // if preview for Room: }\n                <div className={`overlay ${getImgSize}`}>  \n                    <div className='col'>\n                            <Button style={{margin: '0 auto', display: \"flex\"}} className='overlay-btn mt-3' variant='contained' color='secondary' size='small' onClick={goToChat}>Chat</Button>\n                            <Button\n                                style={{margin: '0 auto', display: \"flex\"}}\n                                variant='contained'\n                                color='secondary'\n                                className='overlay-btn mt-2'\n                                id=\"basic-button\"\n                                aria-controls=\"basic-menu\"\n                                aria-haspopup=\"true\"\n                                aria-expanded={open ? 'true' : undefined}\n                                onClick={handleClick}\n                            >\n                            Invite Friend\n                            </Button>\n                            <Menu\n                                id=\"basic-menu\"\n                                anchorEl={anchorEl}\n                                open={open}\n                                onClose={handleClose}\n                                MenuListProps={{'aria-labelledby': 'basic-button',}}\n                                \n                            >\n                                {Object.keys(friends).map(key => \n                                    <MenuItem key={key} sx={{backgroundColor: '#242424', '&:hover': {backgroundColor: '#2d2d2d'}}} onClick={(e) => sendRoomInvite(e)}  >\n                                        <Preview alt='friend' size='img-small' isRoom={false} friend_id={friends[key]} id={friends[key]} />\n                                    </MenuItem>\n                                )}\n\n                            </Menu>\n                            <Button style={{margin: '0 auto', display: \"flex\"}} variant='contained' color='error' className='overlay-btn mt-2' onClick={leaveRoom}>Leave Room</Button>\n                    </div>\n                </div> : null } {/* if no overlay, set to null */}\n\n        </div>\n\n            <div className='friend-name'>\n                <p>{previewName}</p>\n            </div>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport {Link, useHistory} from 'react-router-dom'\nimport {Preview} from './Preview'\nimport './Navbar.scss'\n\nexport const Navbar = (props) => {\n    const [sidebar, setSidebar] = useState(false)\n    const [users, setUsers] = useState([])\n    const history = useHistory()\n\n    const showSidebar = () => setSidebar(!sidebar) // toggle sidebar\n\n    useEffect(() => {\n        const getRoomInfo = async () => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-room-info`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: props.room_id\n                })\n            })\n            const result = await response.json()\n            console.log(result['users'])\n            setUsers(result['users'])\n        }\n        if (props.room_id === null) {\n            setUsers([])\n        } else {\n            getRoomInfo()\n        }\n    }, [props.room_id])\n\n    // logout function\n    const logout = async () => {\n        props.setUser('')\n\n        await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/logout`, { // send post request to logout endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n        })\n        localStorage.removeItem(\"user\")\n        history.push('/login')\n    }\n\n    let menu;\n    // if no user: don't display menu\n    if (props.user === '') {\n        menu = (<></>)\n    } else {\n        menu = (\n        <>\n        <div className='navbar'>\n            <div className='container-fluid navbar-container'/>\n            <div className='nav-bars'>\n                <i className=\"fas fa-bars fa-3x\" onClick={showSidebar}/>\n            </div>\n            <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\n                <ul className='nav-menu-items' onClick={showSidebar}>\n                    <li className='nav-toggle'>\n                        <div className='nav-x'>\n                            <i className=\"fas fa-times fa-3x\"/>\n                        </div>\n                    </li>\n                    <li className='nav-text'>\n                        <Link to='/'>\n                            <i className=\"fas fa-atom\" />\n                            <span> Home</span>\n                        </Link>\n                    </li>\n                    <li className='nav-text'>\n                        <Link to='/login' onClick={logout}>\n                            <i className=\"fas fa-power-off\" />\n                            <span> Logout</span>\n                        </Link>\n                    </li>\n                    {users.length === 0 ? null : Object.keys(users).map(key => \n                        <li key={key} className=''>\n                            <Preview alt='default.jpeg' size='img-small' isRoom={false} friend_id={users[key]} />\n                        </li>\n                    )}\n                    \n                </ul>\n            </nav>\n        </div>\n        </>\n        )\n    }\n\n    return (\n        <>\n        {menu}\n        </>\n    )\n}\n","import React from 'react';\nimport './Button.scss';\n//import {Link} from 'react-router-dom';\n\nconst STYLES = ['btn--primary', 'btn--secondary', 'btn--outline'];\nconst SIZES  = ['btn--med', 'btn--lg', 'btn--sm']\n\nexport const Button = ({children, type, onClick, buttonStyle, buttonSize, my, mx, classes}) => {\n    const getButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0]; // get button style. default to primary\n    const getButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];      // get button size. default to medium\n\n    return (\n        <button className={`btn ${getButtonSize} ${getButtonStyle} ${my} ${mx} ${classes}`} onClick={onClick} type={type}>\n            {children}\n        </button>\n    )\n}\n","import React, {SyntheticEvent, useState} from 'react'\nimport {Button} from './Button'\n//import {Link} from 'react-router-dom'\nimport {Preview} from './Preview'\nimport TextField from '@material-ui/core/TextField';\nimport './Search.scss'\nimport './Message.scss'\n\nexport const Search = (props) => {\n    const [error, setError] = useState('')\n    const [username, setUsername] = useState('')\n    const [receivedData, setReceivedData] = useState(false)\n    const [data, setData] = useState('')\n\n    const submit = async(e: SyntheticEvent) => {\n        e.preventDefault()\n\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/search-friend`, { // send post request to login endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                username: username\n            })\n        })\n\n        const result = await response.json() // get content\n\n        if (result !== null) {\n            setError('')\n            setReceivedData(true)\n            setData(result)\n        } else {\n            setError('user not found')\n            setReceivedData(false)\n            setData('')\n        }\n\n    }\n\n    return (\n        <div className={props.search ? 'search-window active' : 'search-window'} >\n            <div className='search-box'>\n            <div className='mt-5' align='center'>\n                <TextField\n                    label=\"Search...\"\n                    maxRows={4}\n                    variant=\"filled\"\n                    onChange={e=>setUsername(e.target.value)}\n                />\n                <Button buttonSize='btn--md' buttonStyle='btn--secondary' type='submit' my='mt-2' mx='mx-auto' onClick={submit}>Search</Button>\n                {error === '' ? null : <li className='search-result'>{error}</li>}\n                {receivedData ? Object.keys(data).map(key => \n                    <li key={key} className='search-result'>\n                        <Preview src={data[key]['profile_pic']} alt='friend' size='img-large' name={data[key]['username']} friend_id={data[key]['_id']} setReq={data => props.setReq(data) } user={props.user} inPending={false} overlay={true} />\n                    </li>\n                )\n                : null}\n            </div>\n            </div>\n        </div>\n    )\n}\n","import React, {SyntheticEvent, useState} from 'react'\nimport {Button} from './Button'\nimport TextField from '@material-ui/core/TextField';\nimport './CreateRoom.scss'\nimport './Message.scss'\n\nexport const CreateRoom = (props) => {\n    const [error, setError] = useState('')\n    const [roomName, setRoomName] = useState('')\n\n    const submit = async(e: SyntheticEvent) => {\n        e.preventDefault()\n\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/create-room`, { // send post request to login endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                name: roomName,\n            })\n        })\n\n        const result = await response.json() // get content\n        if (result['message'] === 'Successfully created room!') {\n            window.location.reload();\n        } else {\n            setError(result)\n        }\n\n    }\n\n    return (\n        <div className={props.createRoom ? 'create-window active' : 'create-window'} >\n            <div className='search-box'>\n            <div className='mt-5' align='center'>\n                <TextField\n                    label=\"Room Name\"\n                    variant=\"filled\"\n                    onChange={e=>setRoomName(e.target.value)}\n                />\n                <Button buttonSize='btn--md' buttonStyle='btn--secondary' type='submit' my='mt-2' mx='mx-auto' onClick={submit}>Create Room</Button>\n                {error === '' ? null : <li className='search-result'>{error}</li>}\n            </div>\n            </div>\n        </div>\n    )\n}\n","import React, {useState, useEffect, useRef} from 'react'\nimport useStateWithCallback from 'use-state-with-callback';\n//import {Button} from '../components/Button'\nimport {useHistory} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\n//import Alert from '@material-ui/lab/Alert'\nimport {Search} from '../components/Search'\nimport {CreateRoom} from '../components/CreateRoom'\nimport './Home.scss'\n\nexport const Home = (props) => {\n    /*\n    const socket = new WebSocket(\"ws://localhost:8000/ws/\")\n    const socketRef = useRef();\n    socketRef.current = socket;\n    */\n    const socket = useRef(null);\n\n    const [search, setSearch] = useState(false)\n    const [createRoom, setCreateRoom] = useState(false)\n    const [friends, setFriends] = useState('')\n    const [rooms, setRooms] = useState([])\n    const [requests, setRequests] = useState('') // friend requests\n    const requestsRef = useRef();\n    requestsRef.current = requests;\n    const [req, setReq] = useStateWithCallback(null, req => {\n        if (req !== null && socket.current.readyState === 1) {\n            socket.current.send(JSON.stringify(req));\n            setReq(null);\n        } \n    });\n    const history = useHistory()\n    props.setRoomID(null)\n\n    if(!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n\n    const  showSearchWindow = () => setSearch(!search) // toggle search bar\n    const  showRoomWindow = () => setCreateRoom(!createRoom) // toggle search bar\n    const searchClass = search ? 'rotate-icon' : '';\n    const roomClass = createRoom ? 'rotate-icon' : '';\n\n    console.log(\"requests in home: \", requests)\n\n    useEffect(() => {\n        let isMounted = true;\n        const getFriends = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friends`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n\n            const result = await response.json()\n            if (isMounted) {\n                setFriends(result['friends']) \n            }\n        }\n        const getFriendReqs = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friend-reqs`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n            const result = await response.json()\n            if (isMounted) {\n                setRequests(result['requests'])\n            }\n        }\n        const getRooms = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-rooms`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n\n            const result = await response.json()\n            if (isMounted) {\n                setRooms(result['rooms']) \n            }\n        }\n\n        if (isMounted) {\n            getFriends().catch(setFriends(''))\n            getFriendReqs().catch(setRequests(''))\n            getRooms().catch(setRooms([]))\n        }\n\n        socket.current = new WebSocket(`ws://${process.env.REACT_APP_SERVER_URL}/ws`)\n        socket.current.onopen = (event) => {\n            console.log(\"Connected to ws\")\n            //socket.current.send(JSON.stringify({friend_id: 0+'', req: \"HELP ME\"}))\n        }\n        socket.current.onmessage = (request) => {\n            let new_req = JSON.parse(request.data)\n            console.log(\"requests: \", requests)\n            switch(new_req['req']) {\n                case 'add-friend':\n                    console.log(\"requests: \", requestsRef.current)\n                    let filteredRequests = [];\n                    let isInRequests = false;\n                    // check if friend is in requests\n                    Object.keys(requestsRef.current).map(key => {\n                        if (requestsRef.current[key] !== new_req['friend_id']) { // if friend is not current request:\n                            filteredRequests.push(requests[key])   // add to array\n                        } else {\n                            isInRequests = true;                  // otherwise: set isInRequests to true\n                        }\n                        return requestsRef.current[key]\n                    })\n                    console.log(\"isInRequests: \", isInRequests)\n                    if (new_req['sender_id'] === props.user['_id']) {           // if this client is the sender:\n                        if(isInRequests) {                                          // if accepting friend request:\n                            console.log(\"Accepting friend request\")\n                            console.log(\"new requests: \", filteredRequests)\n                            setRequests(filteredRequests)                               // setRequests to array without friend that was just added\n                            setFriends(prev => [...prev, new_req['friend_id']])         // setFriends with newly added friend\n                        }                                                       \n                    } else {                                                    // if this client is the receiver:\n                        if(new_req['in_pending'] === 'true') {                      // if other client accepted friend request:\n                            console.log(\"Friend accepted request\")\n                            setFriends(prev => [...prev, new_req['friend_id']])         // setFriends with newly added friend\n                        } else {                                                // if received friend request from other client:\n                            console.log(\"Received friend request\")\n                            setRequests(prev => [...prev, new_req['friend_id']])    // setRequests with client who sent request\n                        }\n                    }\n                    break;\n                case 'remove-friend':\n                    let filteredArray = [];\n                    Object.keys(friends).map(key => {\n                        console.log(\"friend: \", friends[key])\n                        if (friends[key] !== new_req['friend_id']) {\n                           filteredArray.push(friends[key])\n                        }\n                        return friends[key]\n                    })\n                    console.log(\"filtered array: \", filteredArray)\n                    setFriends(filteredArray)\n                    break;\n                case 'add-to-room':\n                    console.log(\"In add-to-room\")\n                    console.log(\"Is receiver: \", new_req['sender_id'] !== props.user['_id'])\n                    if (new_req['sender_id'] !== props.user['_id']) {    // if this client is not the sender:\n                        window.location.reload();\n                        //setRooms(prev => [...prev, new_req['room_id']])    // setRequests with client who sent request (this doesn't work, very annoying)\n                    }\n                    break;\n                default:\n                    setReq(null)\n                    break;\n            }\n        }\n\n        socket.current.onclose = (event) => {\n            console.log(\"socket closed connection: \", event)\n        }\n\n        return () => { isMounted=false }\n    }, [])\n\n    //const sendReq = () =>{ console.log(\"req in sendReq: \", req); socket.current.send(req); }\n\n    //console.log(\"req in home: \", req)\n\n    return(\n        <div className='container'>\n            <div className=\"rooms-header\">\n                <h2 className=\"rooms-header-text mb-0\">Friends</h2>\n                <i className={`fas fa-plus-circle add-btn mb-0 ${searchClass}`} onClick={showSearchWindow} />\n            </div>\n            <div className=\"search-window-container\">\n                <Search search={search} setSearch={setSearch} setReq={ data => {setReq(data);} } user={props.user} />\n            </div>\n            <div className='row'>\n                {friends === null ? null : Object.keys(friends).map(key => \n                    <div key={key} className='col-sm-12 col-md-4 col-lg-2 px-0 mx-3'>\n                        <Preview alt='friend' size='img-large' isRoom={false} friend_id={friends[key]} setReq={ data => {setReq(data);} } user={props.user} inPending={false} overlay={true} />\n                    </div>\n                )}\n\n            </div>\n\n\n            <div className='rooms-header'>\n                <h2 className=\"rooms-header-text mt-2\">Rooms</h2>\n                <i className={`fas fa-plus-circle add-btn mb-0 ${roomClass}`} onClick={showRoomWindow} />\n            </div>\n            <div className=\"search-window-container\">\n                <CreateRoom createRoom={createRoom} />\n            </div>\n            <div className='row'>\n                {rooms === null ? null : Object.keys(rooms).map(key => \n                    <div key={key} className='col-sm-12 col-md-4 col-lg-2 px-0 mx-3'>\n                        <Preview alt='default_room.jpeg' size='img-large' isRoom={true} room_id={rooms[key]} setReq={ data => {setReq(data);} } user={props.user} overlay={true} />\n                    </div>\n                )}\n            </div>\n\n\n            <div className=\"rooms-header\">\n                <h2 className=\"rooms-header-text mb-0\">Pending Friends</h2>\n            </div>\n            <div className='row'>\n                {requests === null ? null : Object.keys(requests).map(key =>\n                    <div className='col-sm-12 col-md-4 col-lg-2 px-0 mx-3' key={key}>\n                        <Preview src='default_pic.jpeg' alt='friend' size='img-large' name='username' isRoom={false} friend_id={requests[key]} setReq={ data => {setReq(data);} } user={props.user} inPending={true} overlay={true} />\n                    </div>\n                )}\n            </div>\n\n            <p className=\"mt-5 mb-3 mx-auto text-muted\">&copy; 2017–2021</p>\n\n        </div>\n    )\n}\n","import React, {SyntheticEvent, useState} from 'react';\nimport {Button} from '../components/Button';\nimport {Link, Redirect, useHistory} from 'react-router-dom'\nimport './Login.scss';\n\nexport const Login = (props) => {\n    const [redirect, setRedirect] = useState(false)\n    const [email, setEmail]       = useState('')\n    const [pass, setPass]         = useState('')\n    const [error, setError]       = useState('')\n    const history = useHistory()\n\n    if(localStorage.getItem(\"user\")) {\n        history.push('/')\n    }\n\n    // on submit function\n    const submit = async(e: SyntheticEvent) => {\n        e.preventDefault()\n\n        const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/login`, { // send post request to login endpoint\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            credentials: 'include',\n            body: JSON.stringify({\n                email: email,\n                password: pass\n            })\n        })\n\n        const user = await response.json() // get content\n        console.log(\"Login\", user)\n\n        if (user.message !== undefined) {\n            setError(user.message)\n        } else {\n            localStorage.setItem(\"user\", user)\n            props.setUser(user) // set user to logged in user\n            setError('')\n            setRedirect(true) // set redirect to true\n        }\n    }\n\n    // redirect if state is true\n    if(redirect) {\n        return <Redirect to='/' />\n    }\n\n    return (\n    <form className='container login-form' onSubmit={submit}>\n        <h2 className=\"signin-header\">Please Sign In</h2>\n\n        <div className=\"login-input\">\n            <input type=\"email\" className=\"form-control\" placeholder=\"Email Address\" required onChange={e=>setEmail(e.target.value)}/>\n        </div>\n        <div className=\"login-input mb-4\">\n          <input type=\"password\" className=\"form-control\" placeholder=\"Password\" required onChange={e=>setPass(e.target.value)}/>\n        </div>\n        <div className=\"text-danger mb-3\">{error}</div>\n\n        <Button buttonStyle='btn--primary' type=\"submit\">Sign In</Button>\n\n        <p className=\"mt-5 mb-3 text-muted\">Need and account? <Link to=\"register\">Register</Link></p>\n    </form>\n    )\n}\n","import React, {SyntheticEvent, useState} from 'react';\nimport {Button} from '../components/Button';\nimport {Link, Redirect, useHistory} from 'react-router-dom'\nimport './Login.scss';\n\nexport const Register = (props) => {\n    const [, setConfirmPass] = useState('')\n    const [redirect, setRedirect] = useState(false)\n    const [username, setUsername] = useState('')\n    const [email, setEmail]       = useState('')\n    const [error, setError]       = useState('')\n    const [pass, setPass]         = useState('')\n    const history = useHistory()\n\n    if(localStorage.getItem(\"user\")) {\n        history.push('/')\n    }\n\n\n    console.log(props.username)\n\n    const submit = async (e: SyntheticEvent) => {\n        e.preventDefault()\n        // if passwords match and email has @ char\n        if (!error) {\n            await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/register`, { // send post request to register endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    username: username,\n                    email: email,\n                    password: pass,\n                })\n            })\n            setRedirect(true) // set redirect to true\n        }\n    }\n\n    // redirect if state is true\n    if(redirect) {\n        return <Redirect to='/login' />\n    }\n\n    // Check if passwords match\n    const validatePass = (e_val) => {\n        const confirm_pass = e_val\n        setConfirmPass(confirm_pass)\n        if (pass !== confirm_pass) {\n           setError('Passwords do not match') \n        } else {\n            setError('')\n        }\n    }\n\n\n    return (\n    <form className='container login-form' onSubmit={submit}>\n        <h2 className=\"signin-header\">Sign Up</h2>\n\n        <div className=\"login-input\">\n            <input type=\"text\" className=\"form-control\" name=\"username\"  placeholder=\"Username\" required onChange={e => setUsername(e.target.value)}/>\n        </div>\n        <div className=\"login-input\">\n          <input type=\"email\" className=\"form-control\" name=\"email\" placeholder=\"Email Address\" required onChange={e => setEmail(e.target.value)}/>\n        </div>\n        <div className=\"login-input\">\n          <input type=\"password\" className=\"form-control\" name=\"pass\" placeholder=\"Password\" required onChange={e => setPass(e.target.value)}/>\n        </div>\n        <div className=\"login-input\">\n          <input type=\"password\" className=\"form-control\" name=\"confirmPass\" placeholder=\"Confirm Password\" required onChange={e => validatePass(e.target.value)}/>\n        </div>\n        <div className=\"text-danger mb-3\">{error}</div>\n\n        <Button buttonStyle='btn--primary' link=\"/register\" type=\"submit\">Sign Up</Button>\n\n        <p className=\"mt-5 mb-3 text-muted\">Have an account? <Link to=\"/login\">Login</Link></p>\n    </form>\n    )\n}\n","import React from 'react'\nimport './Message.scss'\n\nexport const Message = (props) => {\n    const getColor = props.isCurrUser ? 'current-user' : 'not-current-user';\n    return (\n        <div className={`message mt-3 ${getColor}`}>\n            <div className='message-text mx-2 mt-2'>{props.user + ':'}</div>\n            <div className='message-text mx-2 mt-2'>{props.text}</div>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Button} from './Button'\nimport TextField from '@material-ui/core/TextField';\nimport './MessageBox.scss'\n\nexport const MessageBox = (props) => {\n    return (\n        <div className='row mt-5 message-box' align='center'>\n            <div className='col-sm-11 px-0'>\n                {/* <input className='message-input' type=\"text\" required /> */}\n            <TextField\n                id=\"filled-multiline-flexible\"\n                className=\"message-input\"\n                label=\"Message\"\n                fullWidth\n                variant=\"filled\"\n                onChange={e=>props.onChange(e.target.value)}\n            />\n            </div>\n            <div className='col-sm-1 my-auto pl-1' >\n                <Button buttonSize='btn--md btn--primary' onClick={props.onClick}>Send</Button>\n            </div>\n        </div>\n    )\n}\n","import React, {useEffect, useState, useRef} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\nimport {Message} from '../components/Message'\nimport {MessageBox} from '../components/MessageBox'\nimport './RoomFriend.scss'\n\n//const socket = new WebSocket(\"ws://localhost:8000/ws/234\");\n\nexport const Friend = (props) => {\n    /*\n    const socket = new WebSocket(\"ws://localhost:8000/ws/\")\n    const socketRef = useRef();\n    socketRef.current = socket;\n    */\n    const socket = useRef(null);\n\n    const history = useHistory()\n    const [msg, setMsg] = useState()\n    const [messages, setMessages] = useState([])\n    const [room_id, setRoomId] = useState('');\n    //const room_id = useRef(null);\n    //const socket = useRef(null);\n    //let socket = new WebSocket(\"ws://localhost:8000/ws/123\")\n    props.setRoomID(null)\n\n    let router_data = useParams()\n    let friend_id = router_data['friend_id']\n\n    if (!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n\n    useEffect(() => {\n        const getFriendChat = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-friend-chat`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    friend_id: friend_id\n                })\n            })\n\n            const result = await response.json()\n            setRoomId(result['room_id'])\n        }\n\n        const getMessages = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-messages`, { // send post request to logout endpoint\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: room_id\n                })\n            })\n\n            const result = await response.json()\n            setMessages(result['messages'])\n        }\n\n        getFriendChat()\n        getMessages()\n\n        socket.current = new WebSocket(`ws://${process.env.REACT_APP_SERVER_URL}/ws/`+room_id)\n\n        socket.current.onopen = (event) => {\n            console.log(\"Connection at: \", room_id)\n        }\n        socket.current.onmessage = (msg) => {\n            let new_msg = JSON.parse(msg.data)\n            console.log(new_msg)\n            setMessages(prev => [...prev, new_msg])\n        }\n        socket.current.onclose = (event) => {\n            console.log(\"socket closed connection: \", event)\n        }\n    },[friend_id, room_id])\n\n    const sendMsg = () => {\n        socket.current.send(msg)\n    }\n\n    return (\n        <div className='container room-friend-container'>\n            <div className='row mt-5'>\n                <Preview alt='friend' size='img-large' isRoom={false} friend_id={friend_id} overlay={false} />\n            </div>\n\n            <div className='row'>\n                {messages.length === 0 ? null : Object.keys(messages).map(key => \n                    <div key={key} className=''>\n                        <Message user={messages[key]['user']} text={messages[key]['text']} isCurrUser={props.user['username'] === messages[key]['user']}/>\n                    </div>\n                )}\n            </div>\n\n            <div className='row'>\n                <MessageBox onChange={setMsg} onClick={sendMsg}/>\n            </div>\n        </div>\n    )\n}\n","import React, {useEffect, useState, useRef} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {Preview} from '../components/Preview'\nimport {Message} from '../components/Message'\nimport {MessageBox} from '../components/MessageBox'\nimport './RoomFriend.scss'\n\nexport const Room = (props) => {\n    /*\n    const socket = new WebSocket(\"ws://localhost:8000/ws/\")\n    const socketRef = useRef();\n    socketRef.current = socket;\n    */\n    const socket = useRef(null);\n\n    const history = useHistory()\n    const [msg, setMsg] = useState()\n    const [messages, setMessages] = useState('')\n    // get room id\n    let router_data = useParams()\n    let room_id = router_data['room_id']\n    props.setRoomID(room_id)\n\n    if (!localStorage.getItem(\"user\")) {\n        history.push('/login')\n    }\n\n    useEffect(() => {\n        const getMessages = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/get-messages`, {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include',\n                body: JSON.stringify({\n                    room_id: room_id\n                })\n            })\n\n            const result = await response.json()\n            setMessages(result['messages']) \n        }\n        \n        getMessages()\n\n        \n        socket.current = new WebSocket(`ws://${process.env.REACT_APP_SERVER_URL}/ws/`+room_id)\n        socket.current.onopen = (event) => {\n            console.log(\"Connection at: \", room_id)\n        }\n        socket.current.onmessage = (msg) => {\n            let new_msg = JSON.parse(msg.data)\n            console.log(new_msg)\n            setMessages(prev => [...prev, new_msg])\n        }\n        socket.current.onclose = (event) => {\n            console.log(\"socket closed connection: \", event)\n        }\n    }, [room_id])\n\n\n    const sendMsg = () => socket.current.send(msg)\n\n    return (\n        <div className='container room-friend-container'>\n            <div className='row mt-5'>\n                <Preview alt='room' size='img-large' isRoom={true} room_id={room_id} overlay={false} />\n            </div>\n            <div className='row'>\n                {messages.length === 0 ? null : Object.keys(messages).map(key => \n                    <div key={key} className=''>\n                        <Message user={messages[key]['user']} text={messages[key]['text']} isCurrUser={props.user['username'] === messages[key]['user']} />\n                    </div>\n                )}\n            </div>\n\n            <div className='row'>\n                <MessageBox onChange={setMsg} onClick={sendMsg}/>\n            </div>\n        </div>\n    )\n}\n","import './App.css';\nimport React, {useState, useEffect} from 'react'\nimport { Navbar } from './components/Navbar';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {Home} from './pages/Home';\nimport {Login} from './pages/Login';\nimport {Register} from './pages/Register';\nimport {Friend} from './pages/Friend'\nimport {Room} from './pages/Room'\n\n\nfunction App() {\n    const [user, setUser] = useState('')\n    const [room_id, setRoomID] = useState(null)\n\n    // Get user if logged in\n    useEffect(() => {\n        const fetchUser = async() => {\n            const response = await fetch(`http://${process.env.REACT_APP_SERVER_URL}/api/getuser`, {\n                headers: {'Content-Type': 'application/json'},\n                credentials: 'include'\n            })\n\n            const user = await response.json()\n            \n            if (user.message !== undefined) { // if error message from server:\n                setUser('')                   // set user to empty (couldn't get user)\n            } else {                          // else:\n                localStorage.setItem(\"user\", user)\n                setUser(user)    // set user to retrieved user's user\n            }\n        }\n        fetchUser().catch(setUser('')) // get user, set to empty if cannot get user\n    },[])\n\n  return (\n    <>\n        <BrowserRouter>\n            <Navbar user={user} setUser={setUser} room_id={room_id} />\n            <Route exact path='/'                  component={() => <Home user={user} setUser={setUser} setRoomID={room_id => setRoomID(room_id)}/>}/>\n            <Route path='/login'                   component={() => <Login user={user} setUser={setUser} />}/>\n            <Route path='/register'                component={() => <Register user={user} />} />\n            <Route exact path='/friend/:friend_id' component={() => <Friend user={user} isRoom={false} setRoomID={room_id => setRoomID(room_id)}/>} />\n            <Route exact path='/room/:room_id'     component={() => <Room user={user} isRoom={true} setRoomID={room_id => setRoomID(room_id)} />}/>\n        </BrowserRouter>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}